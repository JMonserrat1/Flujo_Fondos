/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.flujos.Formularios;

import com.flujos.DAOs.DAOClienteProveedor;
import com.flujos.Entidades.ClienteProveedor;
import com.flujos.Utilidades.Conexion;
import com.flujos.Utilidades.Utilidades;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Ian
 */
public class FrmABMClienteProveedor extends javax.swing.JFrame {

    private Conexion con;
    private DAOClienteProveedor daoClienteProveedor;

    /**
     * Creates new form FrmABMClienteProveedor
     */
    public FrmABMClienteProveedor() {
        initComponents();
        inicializar();

    }

    private void inicializar() {
        txtNombre.setText("");
        txtDNI.setText("");
        txtEmail.setText("");
        txtTelefono.setText("");
        txtIdClienteProveedor.setVisible(false);
        comboTipoCliente.setSelectedIndex(0);
        btnAgregar.setEnabled(true);
        btnModificar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnLimpiar.setEnabled(true);
        daoClienteProveedor = new DAOClienteProveedor();
        con = new Conexion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDNI = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblTipo = new javax.swing.JLabel();
        lblTelefono = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtDNI = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        comboTipoCliente = new javax.swing.JComboBox<>();
        btnBuscarClienteProveedor = new javax.swing.JButton();
        txtIdClienteProveedor = new javax.swing.JTextField();
        btnSalir = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ABM Cliente/Proveedor");

        lblDNI.setText("DNI/CUIT O CUIL: ");

        lblEmail.setText("Email:");

        lblTipo.setText("Tipo: ");

        lblTelefono.setText("Telefono:");

        lblNombre.setText("Nombre/Razon social: ");

        comboTipoCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Cliente", "Proveedor" }));

        btnBuscarClienteProveedor.setText("Buscar");
        btnBuscarClienteProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarClienteProveedorActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(306, Short.MAX_VALUE)
                .addComponent(btnBuscarClienteProveedor)
                .addGap(163, 163, 163)
                .addComponent(txtIdClienteProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTelefono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDNI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNombre)
                    .addComponent(txtDNI)
                    .addComponent(txtTelefono)
                    .addComponent(txtEmail)
                    .addComponent(comboTipoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(183, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscarClienteProveedor)
                    .addComponent(txtIdClienteProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNombre)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDNI)
                            .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTelefono)
                            .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblEmail))
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipo)
                    .addComponent(comboTipoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btnBuscarClienteProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarClienteProveedorActionPerformed

        btnAgregar.setEnabled(false);
        btnModificar.setEnabled(true);
        btnEliminar.setEnabled(true);

        String dato = JOptionPane.showInputDialog("Dni/Cuit/Cuil: ");

        if (dato != null && !dato.equals("") && Utilidades.isNunInt(dato) && Integer.parseInt(dato) > 0) {
            Integer datoEntero = Integer.valueOf(dato);
            ClienteProveedor clienteProveedor = daoClienteProveedor.obtenerDatos(datoEntero, con.getConexion());

            if (clienteProveedor != null) {
                txtDNI.setText(String.valueOf(clienteProveedor.getDniCuit()));
                txtNombre.setText(clienteProveedor.getNomRazonSocial());
                txtEmail.setText(clienteProveedor.getEmail());
                txtTelefono.setText(clienteProveedor.getTelefono());
                txtIdClienteProveedor.setText(String.valueOf(clienteProveedor.getIdClienteProveedor()));

                comboTipoCliente.setSelectedItem(clienteProveedor.getTipoClienteProveedor());
            } else {
                Utilidades.msg(null, "No existe el Cliente/Proveedor o se produjo un error");
                btnAgregar.setEnabled(true);
                btnModificar.setEnabled(false);
                btnEliminar.setEnabled(false);

            }

        } else {
            Utilidades.msg(null, "Debe ingresar un número entero mayor a 0");
            btnAgregar.setEnabled(true);
            btnModificar.setEnabled(false);
            btnEliminar.setEnabled(false);

        }

    }//GEN-LAST:event_btnBuscarClienteProveedorActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        try {
            con.cerrarConexion();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error al salir de la ventana, intente de nuevo.");
            this.dispose();
        }
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        if (txtNombre.getText().equals("")) {
            Utilidades.msg(null, "El nombre no puede estar vacio");
            txtNombre.requestFocus();
            return;
        }

        if (txtDNI.getText().equals("")) {
            Utilidades.msg(null, "El DNI no puede estar vacio");
            txtDNI.requestFocus();
            return;
        }
        if (Utilidades.isNunInt(txtDNI.getText()) && !(Integer.parseInt(txtDNI.getText()) > 0)) {
            Utilidades.msg(null, "DNI/CUIT incorrecto");
            txtDNI.setText("");
            txtDNI.requestFocus();
            return;

        }

        if (txtTelefono.getText().equals("")) {
            Utilidades.msg(null, "El Telefono no puede estar vacio");
            txtTelefono.requestFocus();
            return;
        }

        if (txtEmail.getText().equals("")) {
            Utilidades.msg(null, "El Email no puede estar vacio");
            txtEmail.requestFocus();
            return;
        }
        if (comboTipoCliente.getSelectedItem().equals("--")) {
            Utilidades.msg(null, "El tipo de cliente no puede estar vacio");
            comboTipoCliente.requestFocus();
            return;
        }

        if (Utilidades.existe(con.getConexion(), "SELECT (1) FROM cliente_proveedores WHERE dni_cuit = '" + txtDNI.getText() + "' ")) {

            Utilidades.msg(null, "No se puede ingresar porque el DNI/CUIT ya existe");
            txtNombre.setText("");
            txtDNI.setText("");
            txtEmail.setText("");
            txtTelefono.setText("");
            comboTipoCliente.setSelectedIndex(0);

        } else {
            try {
                ClienteProveedor cliente = new ClienteProveedor();
                cliente.setNomRazonSocial(txtNombre.getText());
                cliente.setDniCuit(Integer.valueOf(txtDNI.getText()));
                cliente.setTelefono(txtTelefono.getText());
                cliente.setEmail(txtEmail.getText());
                cliente.setTipoClienteProveedor(comboTipoCliente.getSelectedItem().toString());
                daoClienteProveedor.ingresarClienteProveedor(cliente, con.getConexion());

                Utilidades.msg(null, "Cliente/Proveedor ingresado correctamente");
                txtNombre.setText("");
                txtDNI.setText("");
                txtEmail.setText("");
                txtTelefono.setText("");
                comboTipoCliente.setSelectedIndex(0);

            } catch (SQLException ex) {
                Utilidades.msg(null, "Error al ingresar el Cliente/Proveedor");
                this.dispose();
            }
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed

        try {
            if (txtNombre.getText().equals("")) {
                Utilidades.msg(null, "El nombre no puede estar vacio");
                txtNombre.requestFocus();
                return;
            }

            if (txtDNI.getText().equals("")) {
                Utilidades.msg(null, "El DNI no puede estar vacio");
                txtDNI.requestFocus();
                return;
            }
            if (Utilidades.isNunInt(txtDNI.getText()) && !(Integer.parseInt(txtDNI.getText()) > 0)) {
                Utilidades.msg(null, "DNI/CUIT incorrecto");
                txtDNI.setText("");
                txtDNI.requestFocus();
                return;

            }

            if (txtTelefono.getText().equals("")) {
                Utilidades.msg(null, "El Telefono no puede estar vacio");
                txtTelefono.requestFocus();
                return;
            }

            if (txtEmail.getText().equals("")) {
                Utilidades.msg(null, "El Email no puede estar vacio");
                txtEmail.requestFocus();
                return;
            }
            if (comboTipoCliente.getSelectedItem().equals("--")) {
                Utilidades.msg(null, "El tipo de cliente no puede estar vacio");
                comboTipoCliente.requestFocus();
                return;
            }

            ClienteProveedor clienteProveedor = new ClienteProveedor();

            clienteProveedor.setIdClienteProveedor(Long.valueOf(txtIdClienteProveedor.getText()));
            clienteProveedor.setDniCuit(Integer.valueOf(txtDNI.getText()));
            clienteProveedor.setEmail(txtEmail.getText());
            clienteProveedor.setNomRazonSocial(txtNombre.getText());
            clienteProveedor.setTelefono(txtTelefono.getText());
            clienteProveedor.setTipoClienteProveedor(comboTipoCliente.getSelectedItem().toString());

            daoClienteProveedor.actualizar(clienteProveedor, con.getConexion());
            Utilidades.msg(null, "ClienteProveedor actualizado corrrectamente");
            txtNombre.setText("");
            txtDNI.setText("");
            txtEmail.setText("");
            txtTelefono.setText("");
            txtIdClienteProveedor.setText("");
            comboTipoCliente.setSelectedIndex(0);

            btnAgregar.setEnabled(true);
            btnModificar.setEnabled(false);
            btnEliminar.setEnabled(false);
        } catch (SQLException ex) {

            Utilidades.msg(null, "Se produjo un error al actualizar el cliente/proveedor");

        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

        try {
            daoClienteProveedor.eliminar(Long.valueOf(txtIdClienteProveedor.getText()), con.getConexion());
            Utilidades.msg(null, "Se elimino el cliente/proveedor correctamente");

            txtNombre.setText("");
            txtDNI.setText("");
            txtEmail.setText("");
            txtTelefono.setText("");
            txtIdClienteProveedor.setText("");
            comboTipoCliente.setSelectedIndex(0);

            btnAgregar.setEnabled(true);
            btnModificar.setEnabled(false);
            btnEliminar.setEnabled(false);
        } catch (SQLException ex) {
            Utilidades.msg(null, "No se pudo eliminar el cliente/proveedor, intente nuevamente");
            this.dispose();
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtNombre.setText("");
        txtDNI.setText("");
        txtEmail.setText("");
        txtTelefono.setText("");
        txtIdClienteProveedor.setText("");
        comboTipoCliente.setSelectedIndex(0);

        btnAgregar.setEnabled(true);
        btnModificar.setEnabled(false);
        btnEliminar.setEnabled(false);
    }//GEN-LAST:event_btnLimpiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmABMClienteProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmABMClienteProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmABMClienteProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmABMClienteProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmABMClienteProveedor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscarClienteProveedor;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> comboTipoCliente;
    private javax.swing.JLabel lblDNI;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JLabel lblTipo;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtIdClienteProveedor;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
